#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>
#include <string>
//#include "department.h"
//#include "student.h"
//#include "person.h"
//#include "course.h"
//#include "faculty.h"
//#include "university.h"
#ifndef UNIVERSITY_CPP
#define UNIVERSITY_CPP
using namespace std;

class Course
{
protected:
  long CRN;
  int maxAvaliableSeats;
  string name;
  long departId;
  long assignedSeats;
  long isTaughtBy;
  static long nextCRN; //Initialize to 200                                                           
public:
  Course();
  Course(long cnum, int max, string n, long d, long a, long taught);
  void printCourse();
};
long Course::nextCRN = 200;
Course::Course()
{
  CRN = maxAvaliableSeats = departId = 0;
  assignedSeats = isTaughtBy = 0;
  name = "unknown";
}
Course::Course(long cnum, int max, string n, long d, long a, long taught)
{
  CRN = cnum;
  maxAvaliableSeats = max;
  name = n;
  departId = d;
  assignedSeats = a;
  isTaughtBy = taught;
  nextCRN++;
}
void Course::printCourse()
{
  cout << setw(6) << CRN;
  cout << setw(6) << maxAvaliableSeats;
  cout << setw(10) << name;
  cout << setw(6) << departId;
  cout << setw(10) << assignedSeats;
  cout << setw(10) << isTaughtBy;
  cout << endl;
}
class Person
{
protected:
  long id;
  string name;
  string email;
  string address;
  string dateOfBirth;
  string gender;
public:
  Person();
  Person(long i, string n, string e, string a, string d, string g);
  void printPerson();
};
Person::Person()
{
  id = 0;
  name = email = address = dateOfBirth = gender + "unknown";
}

Person::Person(long i, string n, string e, string a, string d, string g)
{
  id = i;
  name = n;
  email = e;
  address = a;
  dateOfBirth = d;
  gender = g;
}

void Person::printPerson()
{
  cout << setw(10) << id;
  cout << setw(10) << name;
  cout << setw(20) << email;
  cout << setw(25) << address;
  cout << setw(10) << dateOfBirth;
  cout << setw(10) << gender;
  cout << endl;
}
class Faculty: public Person
{
protected:
  float salary;
  int yearOfExp;
  long departId;
  static long nextFacultyId; //initialize to 600                                                     
public:
  Faculty();
  Faculty(long i, string n, string e, string a, string d, string g, float s, int y, long dep);
};
long Faculty::nextFacultyId = 600;

Faculty::Faculty():Person()
{
  salary = yearOfExp = departId = 0;
}

Faculty::Faculty(long i, string n, string e, string a, string d, string g, float s, int y, long dep):
  Person(i, n, e, a, d, g)
{
  salary = s;
  yearOfExp = y;
  departId = dep;
  nextFacultyId++;
}
class Student: public Person
{
protected:
  int yearOfStudy;
  string major;
  long advisorId;
  vector <Course> coursesTaken;
  static long nextStId; //initialize it to 500                                                       

public:
  Student();
  Student(long i, string n, string e, string a, string d, string g, int y, string m, long adv);
};
long Student::nextStId = 500;

Student::Student():Person()
{
  yearOfStudy = advisorId = 0;
  major = "unknown";
}

Student::Student(long i, string n, string e, string a, string d, string g, int y, string m, long adv\
		 ):
  Person(i, n, e, a, d, g)
{
  yearOfStudy = y;
  major = m;
  advisorId = adv;
  nextStId++;
}

class Department
{
protected:
  long id;
  string name;
  string location;
  long chairId;
  static long nextDepartId; //Initialize to 100                                                      
public:
  Department();
  Department(string n, string l, long c);
  void printDepartment();
};
long Department::nextDepartId = 100;

Department::Department()
{
  id = chairId = 0;
  name = location = "unknown";
}

Department::Department(string n, string l, long c)
{
  id = nextDepartId;
  name = n;
  location = l;
  chairId = c;
  nextDepartId++;
}

void Department::printDepartment()
{
  cout << setw(10) << id;
  cout << setw(10) << name;
  cout << setw(10) << location;
  cout << setw(10) << chairId;
  cout << endl;
}
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

class University
{
protected:
  vector<Department> Departments;
  vector<Student> Students;
  vector<Course> Courses;
  vector<Faculty> Faculties;
  static bool failure;
  static bool success;

public:
  University();
  ~University();
  
  bool CreateNewDepartment(string depName, string depLoc, long depChairId);
  //!!bool RemoveADepartment(long depId);
  bool CreateNewStudent(string sName, string sEmail, string sAddress, string sDateOfBirth, string sGender,
			int sYearOfStudy, string sMajor, long sAdvisorId);
  //!!bool RemoveAStudent(long sStId); 
  bool CreateNewCourse(string cName, long cDepId, long cTaughtBy, int cMaxSeat);
  //!!bool RemoveACourse(long cCRN); // Optional 
  bool CreateNewFaculty(string fName, string fEmail, string fAddress, string fDateOfBirth, string fGender,
			float fSalary, int fYearOfExp, long fDepId);
  //!!bool RemoveAFaculty(long fFactId);
  bool ListCoursesTaughtByFaculty(long facultyId);
  bool ListCoursesTakenByStudent(long studentId);
  bool ListFacultiesInDepartment (long departId);
  bool ListStudentsOfAFaculty(long facultyId);
  bool ListCoursesOfADepartment(long departId);
  bool AddACourseForAStudent(long courseId, long stId);
  bool DropACourseForAStudent(long courseId, long stId);
  bool AssignDepartmentChair(long facultyId, long departId);
  bool AssignInstructorToCourse (long facultyId, long courseId);
  
  bool ListDepartments();
  bool ListStudents();
  bool ListCourses();
  bool ListFaculties();

  bool ProcessTransactionFile(string fileName);
};

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

bool University::failure = false;
bool University::success = true;

//----------------------------------------------------------------------------
University::University()
{
  Department D;
  Student S;
  Course C;
  Faculty F;
  Departments.push_back(D);
  Students.push_back(S);
  Courses.push_back(C);;
  Faculties.push_back(F);
}

//----------------------------------------------------------------------------
University::~University()
{

}

//----------------------------------------------------------------------------
bool University::CreateNewDepartment(string depName, string depLoc, long depChairId)
{
  /*
    - If the depChairId is 0, it means the chair is not known yet; otherwise, you need
      to check if the depChairId passed to this method is a valid existing faculty.
        print appropriate message and return failure if the chair is not valid
	  

	- create an object of department that calls appropriate constructor to assign
	  these values
	  - the value of id should be assigned to the value of nextDepartId
	  - Make sure to increment the value of nextDepartId by 1 in the constructor
	  - insert the new object to the Departments vector
	  - return success
  */
  bool facultyFound = false;

  if(depChairId == 0)
    facultyFound = true;
  else
    {
      for(int i = 0; i < Faculties.size() && facultyFound == false; i++)
	{
	  if(Faculty::Faculties[i].departId == depChairId)
	    facultyFound = true;
	}

      if(facultyFound == false)
	{
	  cout << "Error: Department Chair ID not valid.\n";
	  return failure;
	}
      
      Department Dept(depName, depLoc, depChairId);
      Departments.push_back(Dept);
      return success;
    }
}

//----------------------------------------------------------------------------
/*!!
bool University::RemoveADepartment(long depId)
{
  /*
    - check if the depId passed to this method is a valid existing department id. If not
      return failure; otherwise,
      - search and remove the department from the Departments vector only if the department has no faculty 
        and offers no course and no student's major matches the department name 
	- return success
}
 !! */

//----------------------------------------------------------------------------
bool University::CreateNewStudent(string sName, string sEmail, string sAddress, string sDateOfBirth, string sGender, int sYearOfStudy, string sMajor, long sAdvisorId)
{
  /*
    - If the sMajor is 0, it means the student has not chosen a major; otherwise, you need
      to check if the sMajor passed to this method is a valid existing department name.
        print appropriate message and return failure if this is not the case

	- If the sAdvisorId is 0, it means the student has not chosen an advisor or does not need 
	  an advisor; otherwise, you need to check if the sAdvisorId passed to this method 
	    is a valid existing faculty id. Print appropriate message and return failure if this is not the case

	      
	    - create an object of student that calls appropriate constructor to assign
	      these values
	      - the value of id should be assigned to the value of nextSttId
	      - Make sure to increment the value of nextStId by 1 in the constructor
	      - insert the new object to the Students vector
	      - return success 
	      
	      - Note: The vector CourseTaken should be initially empty. You can use the appropriate methods 
	        shown in the University class to add or drop a course for a student later
  */
}

//----------------------------------------------------------------------------
/*!!
bool University::RemoveAStudent(long sStId)
{
  /*
    - check if the sStId passed to this method is a valid existing student id. If not
      return failure; otherwise,
      - search and remove the student from the Students vector
      - make sure that before removing the student, you need to call the drop course method to drop his/her
        courses
	- return success
  }
!!*/

//----------------------------------------------------------------------------
bool University::CreateNewCourse(string cName, long cDepId, long cTaughtBy, int cMaxSeat)
{
  /*
    - If the cTaughtBy is 0, it means no one is assigned to teach this course. 
      otherwise, you need to check if the cTaughtBy passed to this method is a 
        valid existing faculty. Print appropriate message and return failure if 
	  this is not the case

    - you need to check if the cDepId passed to this method is a valid existing department. 
      Print appropriate message and return failure if this is not the case

      - create an object of Course that calls appropriate constructor to assign these values
      - the value of assigned seats should be assigned to zero in the constructor
      - the value of CRN should be assigned to the value of nextCRN
							     - Make sure to increment the value of nextCRN by 1 in the constructor
							     - insert the new object to the Courses vector
							     - return success
*/

}

//----------------------------------------------------------------------------
/*!!
bool University::RemoveACourse(long cCRN)
{
  /*
    - check if the cCRN passed to this method is a valid existing course id. If not
      return failure; otherwise,
      - search and remove the course from the Courses vector only if no student is currently taking 
        this course 
	- return success
}  
!1*/

//----------------------------------------------------------------------------
bool University::CreateNewFaculty(string fName, string fEmail, string fAddress, string fDateOfBirth, string fGender, float fSalary, int fYearOfExp, long fDepId)
{
  /*
    - you need to check if the fDeptId passed to this method is a valid existing department. 
      Print appropriate message and return failure if this is not the case

      - create an object of Faculty that calls appropriate constructor to assign these values
      - the value of faculty id should be assigned to the value of nextFacultyId
      - Make sure to increment the value of nextFacultyId by 1 in the constructor
      - insert the new object to the Faculties vector
      - return success
  */

}

//----------------------------------------------------------------------------
/*!!
bool University::RemoveAFaculty(long fFactId)
{
  /*
    - check if the fFactId passed to this method is a valid existing faculty id. If not
      return failure; otherwise,
      - search and remove the faculty from the Faculties vector only if this faculty is not 
        teaching a course nor advising any student, nor chairing any department
	- return success
  }
!!*/

//----------------------------------------------------------------------------
bool University::ListCoursesTaughtByFaculty(long facultyId)
{
  /*
    - This routine should list all the courses (courseId and CourseName)
      that are currently being taught by a particular faculty 
      - make sure that the facultyId passed to this method is a valid existing 
        faculty id. If this is not the case print appropriate message and return failure; 
	  otherwise, return success

  */

}

//----------------------------------------------------------------------------
bool University::ListCoursesTakenByStudent(long studentId)
{
  /*
    - This routine lists all the courses (courseId and CourseName) 
      that currently taken by a particular student
      - make sure that the studentId passed to this method is a valid existing 
        student id. If this is not the case print appropriate message and return failure; 
	  otherwise, return success

  */

}

//----------------------------------------------------------------------------
bool University::ListFacultiesInDepartment (long departId)
{
  /*
    - This routine lists all the faculties (facultyId, facultyName) in a particular 
      department
    - make sure that the departId passed to this method is a valid existing 
    department id. If this is not the case print appropriate message and return failure; 
  otherwise, return success

*/

}

//----------------------------------------------------------------------------
bool University::ListStudentsOfAFaculty(long facultyId)
{
  /*
    - This routine lists all the students (studentId and studentName) of a particular 
      faculty
      - make sure that the facultyId passed to this method is a valid existing 
        faculty id. If this is not the case print appropriate message and return failure; otherwise, 
	  return success
	    
  */

}

//----------------------------------------------------------------------------
bool University::ListCoursesOfADepartment(long departId)
{
  /*
    - This routine lists all the courses offered by a particular department
    - make sure that the departId passed to this method is a valid existing 
      department id. If this is not the case print appropriate message and return failure; otherwise, 
        return success
  */
}

//----------------------------------------------------------------------------
bool University::AddACourseForAStudent(long courseId, long stId)
{
  /*
    - This routine adds a course for a student
    - When you add a course for a student, you need to ensure that there is enough seat in that class
      Increment the number of assigned seats if you could enroll the student for this course
      - make sure that the courseId and stId passed to this method are both valid 
        If this is not the case print appropriate message and return failure; otherwise, 
	  return success
  */

}

//----------------------------------------------------------------------------
/*!!
bool University::DropACourseForAStudent(long courseId, long stId)
{
  /*
    - This routine drops a course for a student
    - When you drop a course for a student, you need to decrement the number of assigned 
      seats for that course
      - make sure that the courseId and stId passed to this method are both valid 
        If this is not the case print appropriate message and return failure; otherwise, 
	  return success
}  
!!*/


//----------------------------------------------------------------------------
bool University::AssignDepartmentChair(long facultyId, long departId)
{
  /*
    - This routine assigns a chair to a department
    - make sure that the facultyId and departId passed to this method are both valid 
      If this is not the case print appropriate message and return failure; otherwise, 
        return success
  */

}

//----------------------------------------------------------------------------
bool University::AssignInstructorToCourse (long facultyId, long courseId)
{
  /*
    - This routine assigns a course to an instructor to teach
    - make sure that the courseId and facultyId passed to this method are both valid.
    If this is not the case print appropriate message and return failure; otherwise, 
									      return success
*/

}

//----------------------------------------------------------------------------
bool University::ListDepartments()
{
  /*
    - This method should list the department id's and department names only
  */
}

//----------------------------------------------------------------------------
bool University::ListStudents()
{
  /*
    - This method should list the student id's and student names only
  */
}

//----------------------------------------------------------------------------
bool University::ListCourses()
{
  /*
    - This method should list the course id's and course names only
  */
}

//----------------------------------------------------------------------------
bool University::ListFaculties()
{
  /*
    - This method should list the faculty id's and faculty names only
  */
}

//----------------------------------------------------------------------------
bool University::ProcessTransactionFile (string fileName)
{
  string function;
  string name, email, address, DOB, gender, major;
  long YOS, salary, ID;

  ifstream fin;
  fin.open("TransactionFile.txt");

  if(!fin)
    return failure;
  
  while(fin >> function)
    {
      if(function == "CreateNewDepartment")
	{
	  fin >> name;
	  fin >> address;
	  fin >> ID;
	  CreateNewDepartment(name, address, ID);
	}
      else if(function == "ListDepartments")
	{
	  ListDepartments();
	}
      else if(function == "CreateNewFaculty")
	{
	  fin >> name;
	  fin >> email;
	  fin >> address;
	  fin >> DOB;
	  fin >> gender;
	  fin >> YOS;
	  fin >> salary;
	  fin >> ID;
	  CreateNewFaculty(name, email, address, DOB, gender, YOS, salary, ID);
	}
      else if(function == "ListFaculties")
	{	
	  ListFaculties();
	}
      else if(function == "ListFacultiesInDepartment")
	{
	  fin >> ID;
	  ListFacultiesInDepartment(ID);
	}
      else if(function == "CreateNewStudent")
	{
	  fin >> name;
	  fin >> email;
	  fin >> address;
	  fin >> DOB;
	  fin >> gender;
	  fin >> YOS;
	  fin >> major;
	  fin >> ID;
	  CreateNewStudent(name, email, address, DOB, gender, YOS, major, ID);
	}
      else if(function == "ListStudents")
	{
	  ListStudents();
	}
      else if(function == "ListStudentsOfAFaculty")
	{
	  fin >> ID;
	  ListStudentsOfAFaculty(ID);
	}
      else if(function == "CreateNewCourse")
	{
	  fin >> name;
	  fin >> YOS;
	  fin >> salary;
	  fin >> ID;
	  CreateNewCourse(name, YOS, salary, ID);
	}
      else if(function == "ListCourses")
	{
	  ListCourses();
	}
      else if(function == "ListCoursesTaughtByFaculty")
	{
	  fin >> ID;
	  ListCoursesTaughtByFaculty(ID);
	}
      else if(function == "ListCoursesOfADepartment")
	{
	  fin >> ID;
	  ListCoursesOfADepartment(ID);
	}
      else if(function == "AddACourseForAStudent")
	{
	  fin >> YOS;
	  fin >> ID;
	  AddACourseForAStudent(YOS, ID);
	}
      else if(function == "ListCoursesTakenByStudent")
	{
	  fin >> ID;
	  ListCoursesTakenByStudent(ID);
	}
      else if(function == "AssignDepartmentChair")
	{
	  fin >> YOS;
	  fin >> ID;
	  AssignDepartmentChair(YOS, ID);
	}
      else if(function == "AssignInstructorToCourse")
	{
	  fin >> YOS;
	  fin >> ID;
	  AssignInstructorToCourse(YOS, ID);
	}
      else
	{ cout << "ERROR!!! CHECK METHOD OR FILE!!!\n"; return failure;}
    }
  return success;
}

//----------------------------------------------------------------------------
int main() 
{
  University csusm;
  csusm.ProcessTransactionFile("TransactionFile.txt");
}

//-------------------------------------------------------------------------
#endif
